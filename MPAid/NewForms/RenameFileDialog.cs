using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;
using MPAid.Cores;
using MPAid.Models;
using System.Data.Entity;

namespace MPAid.NewForms
{
    public partial class RenameFileDialog : Form
    {
        // Strings kept in fields to make text easier to change.
        private string noSuchFileText = "No such file!";
        private string alreadyExistsText = "Destination file already exists!";
        private string dataLinkErrorText = "Database linking error!";
        private string wordNotFoundText = "That word is not valid, try another, or select from the list.";

        private FileInfo file;

        public FileInfo RenamedFile { get; set; }

        /// <summary>
        /// Default constructor. Where possible, fills the user's details into the text boxes.
        /// </summary>
        public RenameFileDialog()
        {
            InitializeComponent();
            // Use user settings or menu data to automatically fill the fields.
            // Speaker = user's screen name
            // Category will always be word
            WordComboBox.Text = "Word";
            // Word will need a drop-down list
            populateWordComboBox();
            // Label should start with focus and be up to them.
        }

        /// <summary>
        /// Gets the words from the database.
        /// </summary>
        private void populateWordComboBox()
        {
            try
            {
                // Create new database context.
                using (MPAidModel DBModel = new MPAidModel())
                {
                    DBModel.Database.Initialize(false); // Added for safety; if the database has not been initialised, initialise it.

                    MPAiUser current = UserManagement.getCurrentUser();

                    List<Word> view = DBModel.Word.Where(x => (
                       x.Category.Name.Equals("Word")
                       && x.Recordings.Any(y => y.Speaker.SpeakerId == current.Speaker.SpeakerId)  // Until the Menubar is finished, this won't work. Comment this line out to test.
                       )).ToList();

                    view.Sort(new VowelComparer());
                    WordComboBox.DataSource = new BindingSource() { DataSource = view };
                    WordComboBox.DisplayMember = "Name";
                }
            }
            catch (Exception exp)
            {
                Console.WriteLine(exp);
            }
        }

        /// <summary>
        /// Constructor overload allowing a file to be passed in from elsewhere to be renamed.
        /// </summary>
        /// <param name="filename">The file to rename.</param>
        public RenameFileDialog(String filename): this()
        {
            file = new FileInfo(filename);
            filenameTextBox.Text = file.Name;
        }

        /// <summary>
        /// Handles functionality for the "..." button that opens a file picker, and puts the result in the relevant text box.
        /// </summary>
        /// <param name="sender">Automatically Generated by Visual Studio.</param>
        /// <param name="e">Automatically Generated by Visual Studio.</param>
        private void filePickerButton_Click(object sender, EventArgs e)
        {
            try
            {
                if (openFileDialog.ShowDialog() == DialogResult.OK)
                {
                    filenameTextBox.Text = openFileDialog.SafeFileName;
                    file = new FileInfo(openFileDialog.FileName);
                }
            }
            catch (Exception exp)
            {
                Console.WriteLine(exp);
            }
        }

        /// <summary>
        /// Handles functionality for the rename button, and closes the form if successful.
        /// </summary>
        /// <param name="sender">Automatically generated by Visual Studio.</param>
        /// <param name="e">Automatically generated by Visual Studio.</param>
        private void renameButton_Click(object sender, EventArgs e)
        {
            renameCurrentFile();
        }

        /// <summary>
        /// Invokes the name parser to rename the specified file according to naming conventions, and closes the window if successful.
        /// </summary>
        private void renameCurrentFile()
        {
            try
            {
                NameParser parser = new NameParser();
                parser.Address = Path.GetDirectoryName(file.FullName);
                parser.Ext = Path.GetExtension(file.FullName);
                parser.Speaker = speakerTextBox.Text;
                parser.Category = "Word";   // This form is only used for words, not sounds, so the category will always be the same.
                parser.Word = WordComboBox.Text;
                parser.Label = labelTextBox.Text;

                File.Move(file.FullName, parser.SingleFile);

                RenamedFile = new FileInfo(parser.SingleFile);
                DialogResult = DialogResult.OK;
                Close();
            }
            catch (Exception exp)
            {
                if (exp.GetType() == typeof(FileNotFoundException))
                {
                    MessageBox.Show(exp.Message, noSuchFileText);
                }
                else if (exp.GetType() == typeof(IOException))
                {
                    MessageBox.Show(exp.Message, alreadyExistsText);
                }
            }
        }
        /// <summary>
        /// Prevents two lists appearing onscreen at once by closing the main list when the suggestion list is visible.
        /// </summary>
        /// <param name="sender">Automatically generated by Visual Studio.</param>
        /// <param name="e">Automatically generated by Visual Studio.</param>
        private void WordComboBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            WordComboBox.DroppedDown = false;
        }

        /// <summary>
        /// Ensures only valid words are entered, by comparing the text to the names of all words when focus is lost.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void WordComboBox_Leave(object sender, EventArgs e)
        {
            //Prevents the user getting stuck when there are no words.
            if (WordComboBox.Items.Count < 1)
            {
                return;
            }
            foreach (Word w in WordComboBox.Items)
            {
                if (w.Name.Equals(WordComboBox.Text))
                {
                    return;
                }
            }
            MessageBox.Show(wordNotFoundText);
            WordComboBox.Focus();
        }
    }
}
